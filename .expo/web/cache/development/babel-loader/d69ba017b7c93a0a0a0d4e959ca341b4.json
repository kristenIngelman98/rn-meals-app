{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/Users/kristen/Documents/GitHub/rn-meals-app/App.js\";\nimport React, { useState } from 'react';\nimport * as Font from 'expo-font';\nimport { AppLoading } from 'expo-app-loading';\nimport MealsNavigator from \"./navigation/MealsNavigator\";\nimport { enableScreens } from 'react-native-screens';\nenableScreens();\nexport default function App() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      fontLoaded = _useState2[0],\n      setFontLoaded = _useState2[1];\n\n  return React.createElement(MealsNavigator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 10\n    }\n  });\n}","map":{"version":3,"sources":["/Users/kristen/Documents/GitHub/rn-meals-app/App.js"],"names":["React","useState","Font","AppLoading","MealsNavigator","enableScreens","App","fontLoaded","setFontLoaded"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,OAAOC,cAAP;AACA,SAASC,aAAT,QAA8B,sBAA9B;AAEAA,aAAa;AAWb,eAAe,SAASC,GAAT,GAAe;AAAA,kBACQL,QAAQ,CAAC,KAAD,CADhB;AAAA;AAAA,MACrBM,UADqB;AAAA,MACTC,aADS;;AAa5B,SAAO,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD","sourcesContent":["import React, { useState } from 'react';\n// import { Text, View } from 'react-native';\nimport * as Font from 'expo-font';\nimport { AppLoading } from 'expo-app-loading';\nimport MealsNavigator from './navigation/MealsNavigator';\nimport { enableScreens } from 'react-native-screens';\n\nenableScreens();\n\n// const fetchFonts = () => {\n//   return Font.loadAsync({\n//     'open-sans': require('./assets/fonts/OpenSans-Regular.ttf'),\n//     'open-sans-bold': require('./assets/fonts/OpenSans-Bold.ttf')\n//   });\n// };\n\n\n\nexport default function App() {\n  const [fontLoaded, setFontLoaded] = useState(false);\n\n  // if (!fontLoaded) {\n  //   return (\n  //     <AppLoading\n  //       startAsync={fetchFonts}\n  //       onFinish={() => setFontLoaded(true)}\n  //       onError={(err) => console.log(err)}\n  //     />\n  //   );\n  // }\n\n  return <MealsNavigator />;\n}\n"]},"metadata":{},"sourceType":"module"}